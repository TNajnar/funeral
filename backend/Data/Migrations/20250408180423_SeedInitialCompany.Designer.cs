// <auto-generated />
using System;
using Funeral.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408180423_SeedInitialCompany")]
    partial class SeedInitialCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Funeral.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyIco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Praha 1, Hlavní 123",
                            CompanyDic = "CZ12345678",
                            CompanyIco = "12345678",
                            CompanyId = 1,
                            Name = "Hlavní pobočka",
                            PhoneNumber = "+420123456789"
                        });
                });

            modelBuilder.Entity("Funeral.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Moje Firma s.r.o."
                        });
                });

            modelBuilder.Entity("Funeral.Models.Deceased", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Autopsy")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfDeath")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FuneralId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfDeath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvidedDocuments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FuneralId")
                        .IsUnique();

                    b.ToTable("Deceased");
                });

            modelBuilder.Entity("Funeral.Models.FuneralOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("CeremonyLocation")
                        .HasColumnType("text");

                    b.Property<string>("CeremonyVenue")
                        .HasColumnType("text");

                    b.Property<bool>("ConsentOpenCoffin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateOfNegotiation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeceasedId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeCeremony")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Funeral");
                });

            modelBuilder.Entity("Funeral.Models.FuneralOrganizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FuneralId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FuneralId")
                        .IsUnique();

                    b.ToTable("FuneralOrganizer");
                });

            modelBuilder.Entity("Funeral.Models.Branch", b =>
                {
                    b.HasOne("Funeral.Models.Company", null)
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Funeral.Models.Deceased", b =>
                {
                    b.HasOne("Funeral.Models.FuneralOrder", "Funeral")
                        .WithOne("Deceased")
                        .HasForeignKey("Funeral.Models.Deceased", "FuneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funeral");
                });

            modelBuilder.Entity("Funeral.Models.FuneralOrder", b =>
                {
                    b.HasOne("Funeral.Models.Branch", "Branch")
                        .WithMany("Funerals")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Funeral.Models.FuneralOrganizer", b =>
                {
                    b.HasOne("Funeral.Models.FuneralOrder", "Funeral")
                        .WithOne("Organizer")
                        .HasForeignKey("Funeral.Models.FuneralOrganizer", "FuneralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funeral");
                });

            modelBuilder.Entity("Funeral.Models.Branch", b =>
                {
                    b.Navigation("Funerals");
                });

            modelBuilder.Entity("Funeral.Models.Company", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Funeral.Models.FuneralOrder", b =>
                {
                    b.Navigation("Deceased")
                        .IsRequired();

                    b.Navigation("Organizer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
